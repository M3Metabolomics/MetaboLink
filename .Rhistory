#Offset for LOF and kNN scores
offset <- 0.1
# Add LOF scores to the plot (slightly offset to the right)
text(df$X - offset, df$Y, labels = round(lof_scores, 2), pos = 2, cex = 0.7, col = "red")
# Add kNN scores to the plot (slightly offset to the left)
text(df$X + offset, df$Y, labels = round(knn_scores, 2), pos = 4, cex = 0.7, col = "blue")
# Load necessary packages
library(FNN)   # For kNN calculations
library(dbscan) # For LOF calculations
# Define the dataset
points <- data.frame(
x <- c(3, 4, 1, 6, 4, 1, 5, 3),
y <- c(7, 7, 6, 6, 5, 4, 4, 2)
)
rownames(points) <- c("A", "B", "C", "D", "E", "F", "G", "H")
# Check the given subsets
subsets <- list(
c("A", "B", "C"),
c("A", "C", "D"),
c("B", "C", "D"),
c("A", "B", "D"),
c("C", "D", "E"),
c("C", "E", "G")
)
k <- 2
minPts <- 2
# Function to compute kNN outlier scores
compute_kNN_outlier_scores <- function(points, k) {
knn <- get.knn(points, k)
distances <- apply(knn$nn.dist, 1, sum)
names(distances) <- rownames(points)
return(distances)
}
# Calculate the kNN outlier scores for k = 2
kNN_outlier_scores <- compute_kNN_outlier_scores(points, k)
# Function to compute LOF scores
compute_LOF_scores <- function(points, minPts) {
lof_scores <- lof(points, minPts = minPts)
names(lof_scores) <- rownames(points)
return(lof_scores)
}
# Calculate the LOF scores for minPts = 2
LOF_scores <- compute_LOF_scores(points, minPts)
# Function to check if a subset is correctly ordered
is_correctly_ordered <- function(subset, outlier_scores) {
subset_scores <- outlier_scores[subset]
return(all(order(subset_scores, decreasing = TRUE) == 1:length(subset)))
}
# Results for kNN outlier scores
kNN_results <- sapply(subsets, is_correctly_ordered, kNN_outlier_scores)
names(kNN_results) <- subsets
# Results for LOF scores
LOF_results <- sapply(subsets, is_correctly_ordered, LOF_scores)
names(LOF_results) <- subsets
# Print results
print("kNN Outlier Scores Results:")
print(kNN_results)
print("LOF Scores Results:")
print(LOF_results)
# Load necessary packages
library(FNN)   # For kNN calculations
library(dbscan) # For LOF calculations
# Define the dataset
points <- data.frame(
x <- c(3, 4, 1, 6, 4, 1, 5, 3),
y <- c(7, 7, 6, 6, 5, 4, 4, 2)
)
rownames(points) <- c("A", "B", "C", "D", "E", "F", "G", "H")
# Check the given subsets
subsets <- list(
c("F", "C", "B"),
c("H", "D", "E"),
c("H", "E", "C"),
c("E", "G", "C")
)
k <- 2
minPts <- 2
# Function to compute kNN outlier scores
compute_kNN_outlier_scores <- function(points, k) {
knn <- get.knn(points, k)
distances <- apply(knn$nn.dist, 1, sum)
names(distances) <- rownames(points)
return(distances)
}
# Calculate the kNN outlier scores for k = 2
kNN_outlier_scores <- compute_kNN_outlier_scores(points, k)
# Function to compute LOF scores
compute_LOF_scores <- function(points, minPts) {
lof_scores <- lof(points, minPts = minPts)
names(lof_scores) <- rownames(points)
return(lof_scores)
}
# Calculate the LOF scores for minPts = 2
LOF_scores <- compute_LOF_scores(points, minPts)
# Function to check if a subset is correctly ordered
is_correctly_ordered <- function(subset, outlier_scores) {
subset_scores <- outlier_scores[subset]
return(all(order(subset_scores, decreasing = TRUE) == 1:length(subset)))
}
# Results for kNN outlier scores
kNN_results <- sapply(subsets, is_correctly_ordered, kNN_outlier_scores)
names(kNN_results) <- subsets
# Results for LOF scores
LOF_results <- sapply(subsets, is_correctly_ordered, LOF_scores)
names(LOF_results) <- subsets
# Print results
print("kNN Outlier Scores Results:")
print(kNN_results)
print("LOF Scores Results:")
print(LOF_results)
shiny::runApp('Desktop/SDU/Cand/2.Sem/ISA/Code')
shiny::runApp('Desktop/SDU/Cand/2.Sem/ISA/Code')
add_two_integers <- function(a, b) {
return(a + b)
}
add_two_integers(3, 4)
shiny::runApp('Desktop/SDU/Cand/Master thesis /GitHub/MetaboLink')
shiny::runApp('Desktop/SDU/Cand/Master thesis /GitHub/MetaboLink')
shiny::runApp('Desktop/SDU/Cand/Master thesis /GitHub/MetaboLink')
runApp('Desktop/SDU/Cand/Master thesis /GitHub/MetaboLink')
runApp('Desktop/SDU/Cand/Master thesis /GitHub/MetaboLink')
shiny::runApp('Desktop/SDU/Cand/Master thesis /GitHub/MetaboLink-Main')
runApp('Desktop/SDU/Cand/Master thesis /GitHub/MetaboLink-Main')
runApp('Desktop/SDU/Cand/Master thesis /GitHub/MetaboLink-Main')
runApp('Desktop/SDU/Cand/Master thesis /GitHub/MetaboLink-Main')
runApp('Desktop/SDU/Cand/Master thesis /GitHub/MetaboLink-Main')
runApp('Desktop/SDU/Cand/Master thesis /GitHub/MetaboLink-Main')
runApp('Desktop/SDU/Cand/Master thesis /GitHub/MetaboLink-Main')
runApp('Desktop/SDU/Cand/Master thesis /GitHub/MetaboLink-Main')
runApp('Desktop/SDU/Cand/Master thesis /GitHub/MetaboLink-Main')
runApp('Desktop/SDU/Cand/Master thesis /GitHub/MetaboLink-Main')
runApp('Desktop/SDU/Cand/Master thesis /GitHub/MetaboLink-Main')
runApp('Desktop/SDU/Cand/Master thesis /GitHub/MetaboLink-Main')
# Set working directory
setwd("~/Desktop/SDU/Instruktor/BMB547ny/1.sem/E-time/Exercise 4")
# We have ';' as separator and a header in the file
bc_data <- read.csv("breastcancer.csv", header = TRUE, sep = ";", strip.white = TRUE)
# Inspect the dataset
str(bc_data)
# inspect the dataset
summary(bc_data)
# We select only columns 2-12, as the first column is only the row number and the remaining columns are all NAs and we introduce a new variable to store the data
sub_bc_data <- bc_data[, 2:12]
summary(sub_bc_data)
# We convert Cl.thickness to integer
sub_bc_data$Cl.thickness <- as.integer(sub_bc_data$Cl.thickness)
# We convert Cell.size to integer
sub_bc_data$Class <- as.factor(sub_bc_data$Class)
# Since the row values are all supposed to be between 1-10, we can assume that anything outside that range is an outlier. We replace the outliers with the integer closest to the average value of that column.
sub_bc_data$Cell.shape[which(sub_bc_data$Cell.shape > 10)] = as.integer(round(mean(sub_bc_data$Cell.shape, na.rm = T)))
sub_bc_data$Epith.c.size[which(sub_bc_data$Epith.c.size > 10)] = as.integer(round(mean(sub_bc_data$Epith.c.size, na.rm = T)))
sub_bc_data$Bl.cromatin[which(sub_bc_data$Bl.cromatin > 10)] = as.integer(round(mean(sub_bc_data$Bl.cromatin, na.rm = T)))
summary(sub_bc_data)
# Rather than identifing the outliers manually, we can iterate over all columns.
for (i in 2:10) {
# outliers are less than 0 or greater than 10 and not NA
outliers <- (sub_bc_data[, i] < 1 | sub_bc_data[, i] > 10) & !is.na(sub_bc_data[, i])
# First we replace it with NA, so we do not include the outlier in the mean
sub_bc_data[outliers, i] <- NA
# Then we replace with the current mean
sub_bc_data[outliers, i] <- as.integer(round(mean(sub_bc_data[, i], na.rm = TRUE)))
}
summary(sub_bc_data)
# Manual
sub_bc_data$Cell.size[which(is.na(sub_bc_data$Cell.size))] = as.integer(round(mean(sub_bc_data$Cell.size, na.rm = T)))
sub_bc_data$Cell.shape[which(is.na(sub_bc_data$Cell.shape))] = as.integer(round(mean(sub_bc_data$Cell.shape, na.rm = T)))
sub_bc_data$Marg.adhesion[which(is.na(sub_bc_data$Marg.adhesion))] = as.integer(round(mean(sub_bc_data$Marg.adhesion, na.rm = T)))
sub_bc_data$Bare.nuclei[which(is.na(sub_bc_data$Bare.nuclei))] = as.integer(round(mean(sub_bc_data$Bare.nuclei, na.rm = T)))
sub_bc_data$Bl.cromatin[which(is.na(sub_bc_data$Bl.cromatin))] = as.integer(round(mean(sub_bc_data$Bl.cromatin, na.rm = T)))
# Automoatic
# We replace the NAs with the integer closest to the average value of that column
for (i in 2:10) {
# We take sub_bc_data where sub_bc_data is NA for the given column i. Then we assign it the mean along that column rounded and converted to integer
mean_val <- as.integer(round(mean(sub_bc_data[, i], na.rm = TRUE)))
sub_bc_data[is.na(sub_bc_data[, i]), i] <- mean_val
}
# Print factors to find incorrect levels
levels(sub_bc_data$Class)
# We see that benign also appears as b and Benign, and malignant as m and Malignant
sub_bc_data$Class[sub_bc_data$Class == "b"] <- "benign"
sub_bc_data$Class[sub_bc_data$Class == "Benign"] <- "benign"
sub_bc_data$Class[sub_bc_data$Class == "m"] <- "malignant"
sub_bc_data$Class[sub_bc_data$Class == "Malignant"] <- "malignant"
# Update the levels
sub_bc_data$Class <- factor(sub_bc_data$Class)
# Print factors to find incorrect levels
levels(sub_bc_data$Class)
# We use the duplicated function to identify duplicated rows
duplicated_rows <- duplicated(sub_bc_data)
sub_bc_data[duplicated_rows, ]
# We can take Id=1131294 as an example to see that the original instance is not included
sub_bc_data[sub_bc_data$Id == 1131294, ]
# We can remove the duplicated rows
sub_bc_data <- sub_bc_data[!duplicated_rows, ]
# check that we have removed the duplicated rows
duplicated_rows <- duplicated(sub_bc_data)
sub_bc_data[duplicated_rows, ]
# We train a logistic regression model
# We want to predict the Class based on the other variables (except Id)
model <- glm(Class ~ . - Id, data = sub_bc_data, family = "binomial")
summary(model)
pred <- predict(model, sub_bc_data, type = "response")
pred_class <- ifelse(pred > 0.5, "malignant", "benign")
# We can use table to create a confusion matrix
# The rows are the predicted class and the columns are the true class
table(pred_class, sub_bc_data$Class)
runApp('Desktop/SDU/Cand/Master thesis /GitHub/MetaboLink-Main')
runApp('Desktop/SDU/Cand/Master thesis /GitHub/MetaboLink-Main')
runApp('Desktop/SDU/Cand/Master thesis /GitHub/MetaboLink-Main')
runApp('Desktop/SDU/Cand/Master thesis /GitHub/MetaboLink-Main')
runApp('Desktop/SDU/Cand/Master thesis /GitHub/MetaboLink-Main')
runApp('Desktop/SDU/Cand/Master thesis /GitHub/MetaboLink-Main')
runApp('Desktop/SDU/Cand/Master thesis /GitHub/MetaboLink-Main')
runApp('Desktop/SDU/Cand/Master thesis /GitHub/MetaboLink-Main')
runApp('Desktop/SDU/Cand/Master thesis /GitHub/MetaboLink-Main')
runApp('Desktop/SDU/Cand/Master thesis /GitHub/MetaboLink-Main')
runApp('Desktop/SDU/Cand/Master thesis /GitHub/MetaboLink-Main')
runApp('Desktop/SDU/Cand/Master thesis /GitHub/MetaboLink-Main')
runApp('Desktop/SDU/Cand/Master thesis /GitHub/MetaboLink-Main')
runApp('Desktop/SDU/Cand/Master thesis /GitHub/MetaboLink-Main')
runApp('Desktop/SDU/Cand/Master thesis /GitHub/MetaboLink-Main')
for (i in 1:10) {
print(i)
}
runApp('Desktop/SDU/Cand/Master thesis /GitHub/MetaboLink-Main')
runApp('Desktop/SDU/Cand/Master thesis /GitHub/MetaboLink-Main')
runApp('Desktop/SDU/Cand/Master thesis /GitHub/MetaboLink-Main')
runApp('Desktop/SDU/Cand/Master thesis /GitHub/MetaboLink-Main')
runApp('Desktop/SDU/Cand/Master thesis /GitHub/MetaboLink-Main')
runApp('Desktop/SDU/Cand/Master thesis /GitHub/MetaboLink-Main')
library(ggplot2)
library(plotly)
library(caret)
library(clusterProfiler)
library(org.Hs.eg.db)
library(webchem)
library(dplyr)
library(rJava)
library(rJava)
Sys.setenv(JAVA_HOME='~/Library/Internet Plug-Ins')
library(rJava)
shiny::runApp('Desktop/SDU/Cand/Master thesis /GitHub/MetaboLink-Main')
runApp('Desktop/SDU/Cand/Master thesis /GitHub/MetaboLink-Main')
if(colnames(main_df) != rownames(identifier_df)) {
stop("The rownames and colnames of the two data frames do not match. Please check the data.")
}
runApp('Desktop/SDU/Cand/Master thesis /GitHub/MetaboLink-Main')
runApp('Desktop/SDU/Cand/Master thesis /GitHub/MetaboLink-Main')
runApp('Desktop/SDU/Cand/Master thesis /GitHub/MetaboLink-Main')
runApp('Desktop/SDU/Cand/Master thesis /GitHub/MetaboLink-Main')
runApp('Desktop/SDU/Cand/Master thesis /GitHub/MetaboLink-Main')
runApp('Desktop/SDU/Cand/Master thesis /GitHub/MetaboLink-Main')
runApp('Desktop/SDU/Cand/Master thesis /GitHub/MetaboLink-Main')
runApp('Desktop/SDU/Cand/Master thesis /GitHub/MetaboLink-Main')
runApp('Desktop/SDU/Cand/Master thesis /GitHub/MetaboLink-Main')
runApp('Desktop/SDU/Cand/Master thesis /GitHub/MetaboLink-Main')
runApp('Desktop/SDU/Cand/Master thesis /GitHub/MetaboLink-Main')
runApp('Desktop/SDU/Cand/Master thesis /GitHub/MetaboLink-Main')
colnames(pos_liv) == colnames(neg_liv)
pos_liv <- read.csv("Liverfetus_lipid_pos1.csv", header = TRUE, sep = ",")
neg_liv <- read.csv("Liverfetus_lipid_neg1.csv", header = TRUE, sep = ",")
#### Testing data ----
setwd("~/Desktop/SDU/Cand/Master thesis /GitHub/MetaboLink-Main/example_files")
pos <- read.csv("PPP pos1.csv", header = TRUE, sep = ",")
neg <- read.csv("PPP neg1.csv", header = TRUE, sep = ",")
seq <- read.csv("PPP seq.csv", header = TRUE, sep = ",")
pos_liv <- read.csv("Liverfetus_lipid_pos1.csv", header = TRUE, sep = ",")
neg_liv <- read.csv("Liverfetus_lipid_neg1.csv", header = TRUE, sep = ",")
seq_liv_pos <- read.csv("fetus seq neg.csv", header = TRUE, sep = ",")
seq_liv_neg <- read.csv("fetus seq pos.csv", header = TRUE, sep = ",")
colnames(pos_liv) == colnames(neg_liv)
colnames(pos_liv) == seq_liv_pos$sample
colnames(pos_liv) = seq_liv_pos$sample
colnames(pos_liv) == seq_liv_pos$sample
seq_liv_pos
colnames(neg_liv) == seq_liv_neg$sample
colnames(neg_liv) = seq_liv_neg$sample
colnames(neg_liv) == seq_liv_neg$sample
# save data
write.csv(pos_liv, "pos.csv")
write.csv(neg_liv, "neg.csv")
write.csv(seq_liv_pos, "seq_pos.csv")
write.csv(seq_liv_neg, "seq_neg.csv")
shiny::runApp('~/Desktop/SDU/Cand/Master thesis /GitHub/MetaboLink-Main')
runApp('~/Desktop/SDU/Cand/Master thesis /GitHub/MetaboLink-Main')
# check if two data frames are identical
identical(pos_liv, pos_liv)
pos_liv <- read.csv("Liverfetus_lipid_pos1.csv", header = TRUE, sep = ",")
neg_liv <- read.csv("Liverfetus_lipid_neg1.csv", header = TRUE, sep = ",")
seq_liv_pos <- read.csv("fetus seq neg.csv", header = TRUE, sep = ",")
seq_liv_neg <- read.csv("fetus seq pos.csv", header = TRUE, sep = ",")
# check if two data frames are identical
identical(seq_liv_pos, seq_liv_neg)
# find out what is difference
setdiff(seq_liv_pos, seq_liv_neg)
seq_liv_neg$sample = colnames(neg_liv)
seq_liv_neg$sample == colnames(neg_liv)
seq_liv_pos$sample == colnames(pos_liv)
pos_liv <- read.csv("Liverfetus_lipid_pos1.csv", header = TRUE, sep = ",")
neg_liv <- read.csv("Liverfetus_lipid_neg1.csv", header = TRUE, sep = ",")
seq_liv_pos <- read.csv("fetus seq neg.csv", header = TRUE, sep = ",")
seq_liv_neg <- read.csv("fetus seq pos.csv", header = TRUE, sep = ",")
pos_liv <- read.csv("Liverfetus_lipid_pos1.csv", header = TRUE, sep = ",")
neg_liv <- read.csv("Liverfetus_lipid_neg1.csv", header = TRUE, sep = ",")
seq_liv_pos <- read.csv("fetus seq neg.csv", header = TRUE, sep = ",")
seq_liv_neg <- read.csv("fetus seq pos.csv", header = TRUE, sep = ",")
seq_liv_neg$sample == colnames(neg_liv)
seq_liv_pos$sample == colnames(pos_liv)
seq_liv_neg$sample = colnames(neg_liv)
seq_liv_pos$sample = colnames(pos_liv)
write.csv(seq_liv_pos, "seq_pos.csv")
write.csv(seq_liv_neg, "seq_neg.csv")
runApp('~/Desktop/SDU/Cand/Master thesis /GitHub/MetaboLink-Main')
pos_liv <- read.csv("Liverfetus_lipid_pos1.csv", header = TRUE, sep = ",")
neg_liv <- read.csv("Liverfetus_lipid_neg1.csv", header = TRUE, sep = ",")
seq_liv_pos <- read.csv("fetus seq neg.csv", header = TRUE, sep = ",")
seq_liv_neg <- read.csv("fetus seq pos.csv", header = TRUE, sep = ",")
# is column names of liv the same as seq
identical(seq_liv_pos$sample, colnames(pos_liv))
identical(seq_liv_neg$sample, colnames(neg_liv))
# copy
seq_liv_pos_copy <- seq_liv_pos
seq_liv_neg_copy <- seq_liv_neg
# change column names
seq_liv_pos_copy$sample <- colnames(pos_liv)
seq_liv_neg_copy$sample <- colnames(neg_liv)
identical(seq_liv_pos_copy$sample, colnames(pos_liv))
identical(seq_liv_neg_copy$sample, colnames(neg_liv))
# check that seq_liv_pos_copy and seq_liv_pos are identical
identical(seq_liv_pos_copy, seq_liv_pos)
identical(seq_liv_neg_copy, seq_liv_neg)
# what is different
setdiff(seq_liv_pos_copy, seq_liv_pos)
setdiff(seq_liv_neg_copy, seq_liv_neg)
str(seq_liv_pos)
str(seq_liv_pos_copy)
# save data
write.csv(pos_liv, "pos.csv")
write.csv(neg_liv, "neg.csv")
write.csv(seq_liv_pos_copy, "seq_pos.csv")
write.csv(seq_liv_neg_copy, "seq_neg.csv")
runApp('~/Desktop/SDU/Cand/Master thesis /GitHub/MetaboLink-Main')
str(seq_liv_pos)
str(seq_liv_pos_copy)
colnames(seq_liv_pos_copy) == colnames(seq_liv_pos)
pos_liv <- read.csv("Liverfetus_lipid_pos1.csv", header = TRUE, sep = ",")
neg_liv <- read.csv("Liverfetus_lipid_neg1.csv", header = TRUE, sep = ",")
seq_liv_pos <- read.csv("fetus seq neg.csv", header = TRUE, sep = ",")
seq_liv_neg <- read.csv("fetus seq pos.csv", header = TRUE, sep = ",")
# copy
seq_liv_pos_copy <- seq_liv_pos
seq_liv_neg_copy <- seq_liv_neg
# is column names of liv the same as seq
identical(seq_liv_pos$sample, colnames(pos_liv))
identical(seq_liv_neg$sample, colnames(neg_liv))
# change column names
seq_liv_pos_copy$sample <- colnames(pos_liv)
seq_liv_neg_copy$sample <- colnames(neg_liv)
identical(seq_liv_pos_copy$sample, colnames(pos_liv))
identical(seq_liv_neg_copy$sample, colnames(neg_liv))
# check that seq_liv_pos_copy and seq_liv_pos are identical
identical(seq_liv_pos_copy, seq_liv_pos)
identical(seq_liv_neg_copy, seq_liv_neg)
# what is different
setdiff(seq_liv_pos_copy, seq_liv_pos)
setdiff(seq_liv_neg_copy, seq_liv_neg)
str(seq_liv_pos)
str(seq_liv_pos_copy)
summary(seq_liv_pos)
summary(seq_liv_pos_copy)
pos_liv <- read.csv("Liverfetus_lipid_pos1.csv", header = TRUE, sep = ",")
neg_liv <- read.csv("Liverfetus_lipid_neg1.csv", header = TRUE, sep = ",")
seq_liv_pos <- read.csv("fetus seq neg.csv", header = TRUE, sep = ",")
seq_liv_neg <- read.csv("fetus seq pos.csv", header = TRUE, sep = ",")
# change column names
colnames(pos_liv) <- seq_liv_pos_copy$sample
colnames(pos_liv) <- seq_liv_neg_copy$sample <- colnames(neg_liv)
# save data
write.csv(pos_liv, "pos.csv")
write.csv(neg_liv, "neg.csv")
write.csv(seq_liv_pos_copy, "seq_pos.csv")
write.csv(seq_liv_neg_copy, "seq_neg.csv")
runApp('~/Desktop/SDU/Cand/Master thesis /GitHub/MetaboLink-Main')
pos_liv <- read.csv("Liverfetus_lipid_pos1.csv", header = TRUE, sep = ",")
neg_liv <- read.csv("Liverfetus_lipid_neg1.csv", header = TRUE, sep = ",")
seq_liv_pos <- read.csv("fetus seq neg.csv", header = TRUE, sep = ",")
seq_liv_neg <- read.csv("fetus seq pos.csv", header = TRUE, sep = ",")
# change column names
colnames(pos_liv) <- seq_liv_pos_copy$sample
colnames(pos_liv) <- seq_liv_neg_copy$sample <- colnames(neg_liv)
# save data
write.csv(pos_liv, "pos.csv")
write.csv(neg_liv, "neg.csv")
write.csv(seq_liv_pos_copy, "seq_pos.csv")
write.csv(seq_liv_neg_copy, "seq_neg.csv")
pos_liv <- read.csv("Liverfetus_lipid_pos1.csv", header = TRUE, sep = ",")
neg_liv <- read.csv("Liverfetus_lipid_neg1.csv", header = TRUE, sep = ",")
seq_liv_pos <- read.csv("fetus seq neg.csv", header = TRUE, sep = ",")
seq_liv_neg <- read.csv("fetus seq pos.csv", header = TRUE, sep = ",")
# change column names
colnames(pos_liv) <- seq_liv_pos_copy$sample
colnames(pos_liv) <- seq_liv_neg_copy$sample <- colnames(neg_liv)
# change column names
colnames(pos_liv) <- seq_liv_pos_copy$sample
# change column names
colnames(pos_liv) <- seq_liv_pos$sample
colnames(neg_liv) <- seq_liv_neg$sample
# save data
write.csv(pos_liv, "pos.csv")
write.csv(neg_liv, "neg.csv")
write.csv(seq_liv_pos_copy, "seq_pos.csv")
write.csv(seq_liv_neg_copy, "seq_neg.csv")
# save data
write.csv(pos_liv, "pos.csv")
write.csv(neg_liv, "neg.csv")
write.csv(seq_liv_pos, "seq_pos.csv")
write.csv(seq_liv_neg, "seq_neg.csv")
runApp('~/Desktop/SDU/Cand/Master thesis /GitHub/MetaboLink-Main')
runApp('~/Desktop/SDU/Cand/Master thesis /GitHub/MetaboLink-Main')
pos_liv <- read.csv("Liverfetus_lipid_pos1.csv", header = TRUE, sep = ",")
neg_liv <- read.csv("Liverfetus_lipid_neg1.csv", header = TRUE, sep = ",")
seq_liv_pos <- read.csv("fetus seq neg.csv", header = TRUE, sep = ",")
seq_liv_neg <- read.csv("fetus seq pos.csv", header = TRUE, sep = ",")
# is column names of liv the same as seq
identical(seq_liv_pos$sample, colnames(pos_liv))
identical(seq_liv_neg$sample, colnames(neg_liv))
print(colnames(pos_liv))
print(colnames(seq_liv_pos$sample))
print(seq_liv_pos$sample)
# is column names of liv the same as seq
identical(seq_liv_pos$sample, colnames(pos_liv))
identical(seq_liv_neg$sample, colnames(neg_liv))
# is column names of liv the same as seq
identical(seq_liv_pos$sample, colnames(pos_liv))
print(colnames(pos_liv))
print(seq_liv_pos$sample)
# Update column names of pos_liv to match seq_liv_pos$sample
colnames(pos_liv) <- seq_liv_pos$sample
# Verify if the column names are now identical
identical(colnames(pos_liv), seq_liv_pos$sample)
identical(seq_liv_neg$sample, colnames(neg_liv))
# Update column names of pos_liv to match seq_liv_pos$sample
colnames(neg_liv) <- seq_liv_neg$sample
# Verify if the column names are now identical
identical(colnames(neg_liv), seq_liv_neg$sample)
# save data
write.csv(pos_liv, "pos.csv")
write.csv(neg_liv, "neg.csv")
runApp('~/Desktop/SDU/Cand/Master thesis /GitHub/MetaboLink-Main')
runApp('~/Desktop/SDU/Cand/Master thesis /GitHub/MetaboLink-Main')
runApp('~/Desktop/SDU/Cand/Master thesis /GitHub/MetaboLink-Main')
runApp('~/Desktop/SDU/Cand/Master thesis /GitHub/MetaboLink-Main')
runApp('~/Desktop/SDU/Cand/Master thesis /GitHub/MetaboLink-Main')
runApp('~/Desktop/SDU/Cand/Master thesis /GitHub/MetaboLink-Main')
runApp('~/Desktop/SDU/Cand/Master thesis /GitHub/MetaboLink-Main')
runApp('~/Desktop/SDU/Cand/Master thesis /GitHub/MetaboLink-Main')
runApp('~/Desktop/SDU/Cand/Master thesis /GitHub/MetaboLink-Main')
runApp('~/Desktop/SDU/Cand/Master thesis /GitHub/MetaboLink-Main')
runApp('~/Desktop/SDU/Cand/Master thesis /GitHub/MetaboLink-Main')
# Example vector of KEGG IDs
kegg_ids <- c("C00031", "C00022", "C00024")  # Replace with your IDs
# Perform KEGG enrichment analysis
kegg_enrich <- enrichKEGG(gene = kegg_ids, organism = 'hsa', keyType = 'kegg')
# Load packages
library(clusterProfiler)
# Example vector of KEGG IDs
kegg_ids <- c("C00031", "C00022", "C00024")  # Replace with your IDs
# Load packages
library(clusterProfiler)
# Example vector of KEGG IDs
kegg_ids <- c("C00031", "C00022", "C00024")  # Replace with your IDs
# Perform KEGG enrichment analysis
kegg_enrich <- enrichKEGG(gene = kegg_ids, organism = 'hsa', keyType = 'kegg')
# View results
head(kegg_enrich)
# View results
head(kegg_enrich)
# Make an imaginary metabolmoics data with 3 groups with 3 replicates and 10 metabolites
set.seed(123)
data <- matrix(rnorm(30, 1, sd = 4), nrow = 10, ncol = 9)
rownames(data) <- c("C00031", "C00022", "C00024", "C00025",
"C00026", "C00027", "C00028", "C00029",
"C00030", "C00031")  # Replace with your IDs
colnames(data) <- rep(c("Group1", "Group2", "Group3"), each = 3)
# Define the group factor
group <- factor(rep(c("Group1", "Group2", "Group3"), each = 3))
# Create the design matrix without an intercept (using 0)
design <- model.matrix(~ 0 + group)
# Rename the columns for clarity
colnames(design) <- levels(group)
# View the design matrix
print(design)
# Fit the linear model
fit <- lmFit(data, design)
# View the fit object
print(fit)
# Define the contrasts
contrast.matrix <- makeContrasts(
Group2vsGroup1 = Group2 - Group1,
Group3vsGroup1 = Group3 - Group1,
Group3vsGroup2 = Group3 - Group2,
levels = design
)
# View the contrast matrix
print(contrast.matrix)
# Example vector of KEGG IDs
kegg_ids <- c("C00031", "C00022", "C00024")  # Replace with your IDs
runApp('~/Desktop/SDU/Cand/Master thesis /GitHub/MetaboLink-Main')
runApp('~/Desktop/SDU/Cand/Master thesis /GitHub/MetaboLink-Main')
runApp('~/Desktop/SDU/Cand/Master thesis /GitHub/MetaboLink-Main')
runApp('~/Desktop/SDU/Cand/Master thesis /GitHub/MetaboLink-Main')
runApp('~/Desktop/SDU/Cand/Master thesis /GitHub/MetaboLink-Main')
